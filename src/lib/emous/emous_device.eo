enum Emous.Device.Type {
   [[The types devices can be of]]
   unkown  = 0,
   disk,
   removable,
   cd,
   floppy,
   network
}

enum Emous.Device.State {
   umounted = 0,
   mounted = 1,
   mount_req = 2,
   unmount_req = 3
}

struct Emous.Device.State.Changed {
   current : Emous.Device.State;
   old : Emous.Device.State;
}
interface Emous.Device ( ) {
   [[Interface of a device]]
   methods {
      @property state {
         [[The current state of this devise]]
         values {
            mounted : Emous.Device.State;
         }
         get {
            [[Returns the state of this device]]
         }
      }
      @property displayname {
         [[Returns a the name of the displayname can be NULL if there is no usefull name]]
         values {
            name : string;
         }
         get {
            [[A name to display or NULL]]
         }
      }
      @property mountpoints {
         [[A List of mountpoints where this device is mounted]]
         values {
            mountpoints : list<stringshare>;
         }
         get {
            [[Get the list of mountpoints]]
         }
      }
      @property size {
         [[The size of the filesystem behind this device]]
         values {
            size : long;
         }
         get {
            [[Returns the size in bytes.]]
         }
      }
      @property type {
         [[Which kind of device this is]]
         values {
            type: Emous.Device.Type;
         }
         get {
            [[Returns the type of this device]]
         }
      }
      mount {
         [[Requests this device to be mounted]]
         return : bool;
      }
      umount {
         [[Requests this device to be unmounted]]
         return : bool;
      }
   }
   events {
      state,changed : Emous.Device.State.Changed; [[The device state has changed]]
   }
}
